#ifdef NGX_MAINDOMAIN
    server {
        listen [@AURA_IPV6@]:80;
        listen @AURA_IPV4@:80;
#ifdef NGX_ENABLE_SSL
        listen [@AURA_IPV6@]:443 ssl;
        listen @AURA_IPV4@:443 ssl;
        ssl_certificate /aura/secure/certificates/nginx/@NGX_SSL_CERT@.crt;
        ssl_certificate_key /aura/secure/certificates/nginx/@NGX_SSL_CERT@.key;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers !aNULL:!LOW:!MD5:!EXP:CAMELLIA:AES256:HIGH:AES128:!RC4:!3DES:!SEED;
        ssl_prefer_server_ciphers on;
#endif
        server_name @NGX_SUBDOMAIN@.@NGX_ROOTDOMAIN@;
        add_header X-BinOC configured=true always;
        add_header X-BinOC platform=aura always;
        add_header X-BinOC level=@AURA_VERSION@ always;
        add_header X-BinOC build=@BUILD_EDATE@ always;
#ifdef BUILD_PROJECT_SHA1
        add_header X-BinOC sha1=@BUILD_PROJECT_SHA1@ always;
#endif
        return 302 $scheme://@NGX_ROOTDOMAIN@$request_uri;
    }
#endif
    server {
        listen [@AURA_IPV6@]:80;
        listen @AURA_IPV4@:80;
#ifdef NGX_ENABLE_SSL
        listen [@AURA_IPV6@]:443 ssl;
        listen @AURA_IPV4@:443 ssl;
        ssl_certificate /aura/secure/certs/nginx/@NGX_SSL_CERT@.crt;
        ssl_certificate_key /aura/secure/certs/nginx/@NGX_SSL_CERT@.key;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers !aNULL:!LOW:!MD5:!EXP:CAMELLIA:AES256:HIGH:AES128:!RC4:!3DES:!SEED;
        ssl_prefer_server_ciphers on;
#endif
#ifdef NGX_MAINDOMAIN
        server_name @NGX_ROOTDOMAIN@;
#else
        server_name @NGX_SUBDOMAIN@.@NGX_ROOTDOMAIN@;
#endif

        location / {
#ifdef NGX_ENABLE_APACHE
            proxy_pass http://127.0.0.1:@AURA_USER_PORT8@;
#else
            proxy_pass http://unix:/var/run/aura-@AURA_USER_CLASS@-@AURA_USER_NAME@-nginx.socket;
#endif
            proxy_set_header Host $host;
            proxy_set_header HTTPS $https;

#ifdef NGX_ENABLE_CLOUDFLARE
            proxy_set_header X-Real-IP $http_cf_connecting_ip;
            proxy_set_header X-Forwarded-For $http_cf_connecting_ip;
#else
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $remote_addr;
#endif

            proxy_set_header X-Real-Scheme $scheme;
            proxy_set_header X-Forwarded-Host $host;
        }
        add_header X-BinOC configured=true always;
        add_header X-BinOC platform=aura always;
        add_header X-BinOC level=@AURA_VERSION@ always;
        add_header X-BinOC build=@BUILD_EDATE@ always;
#ifdef BUILD_PROJECT_SHA1
        add_header X-BinOC sha1=@BUILD_PROJECT_SHA1@ always;
#endif
    }